{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red52\green52\blue52;
\red84\green89\blue112;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c26667\c26667;
\cssrgb\c40392\c42745\c51373;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww17020\viewh14580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This sample project goes along with two blogs posts.\
\
For the first, see ReadMe #1.rtfd.\
\
The second is:\
\
	{\field{\*\fldinst{HYPERLINK "https://apontious.com/2017/12/03/restoring-transience/"}}{\fldrslt https://apontious.com/2017/12/03/restoring-transience/}}\
\
To guard against bit rot, the entirety of the post is reproduced below.\
\
\'97 Andrew Pontious\
12/3/2017\
\
\pard\pardeftab720\partightenfactor0

\b\fs96 \cf2 \cb3 \expnd0\expndtw0\kerning0
Restoring Transience\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs30 \cf4 \cb3 \
While doing some Core Data research, I came across my old\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/apontious/transientCoreDataProperties"}}{\fldrslt \cf5 \ul \ulc5 GitHub project}} (from {\field{\*\fldinst{HYPERLINK "https://apontious.com/2012/06/17/fleeting/"}}{\fldrslt \cf5 \ul \ulc5 this post}})\'a0demonstrating transient attributes.\
\cb1 \
\cb3 I decided to update my project to current coding and Core Data practices, as an exercise, and I discovered a couple interesting, if minor, points.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs36 \cf4 \cb3 1. Managed Object Context Uses Weak References\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs30 \cf4 \cb3 \
The whole purpose of the project was that, if I tried to fetch the same objects in two different Core Data contexts, the transient attributes wouldn\'92t be preserved.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 But now, I found that even doing the same fetch in the\'a0
\i same context
\i0  would return different Objective-C objects, and thus would not preserve the transient attributes for any objects that I had made previously. What had changed? What was going on?\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic disappearing-attributes.png \width12300 \height8480 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\cb3 What had changed, as far as I can see, is that Core Data is far more aggressive in deleting in-memory objects that don\'92t have any references to them\'a0
\i except
\i0  the context. Since my original project was doing a fetch every time it wanted the list of objects, and keeping no permanent reference to them, that meant that every object except the most recent one was going away and being recreated, and thus their transient attributes were not being preserved.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 I\'92ve changed the project to keep its own list of the objects it has created so far, so they\'92ll stick around until I click the \'93Refresh\'94 button.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 This also means that I don\'92t need multiple contexts. I can just nil out my own list (and call\'a0
\f1 reset
\f0  on the context to be sure), and I\'92ll get new model object instances for my next fetch. 
\i This
\i0  means that I can update my code to use the new 
\f1 NSPersistentContainer
\f0  class and its main-thread-only 
\f1 viewContext
\f0  for all my work, without worrying about maintaining multiple main-thread contexts myself.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs36 \cf4 \cb3 2. There\'92s a Trick to Editing a Managed Object Model at Runtime
\b0\fs30 \cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 In my original project, the model was set to\'a0
\i not
\i0  use a transient attribute. If you wanted to test transient attributes for yourself, you had to go in and manually change the model file in my project, rebuild, and run it again.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 This time around, I decided to do better.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 So while I still left that attribute as non-transient on disk, I added some code to edit the model in memory before it is used, and tied that value to a new checkbox in the user interface. This, the comments in 
\f1 NSManagedObjectModel
\f0  assure me, is totally allowed and supported.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic new-checkbox.png \width12300 \height8480 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\cb3 Now, if you toggle that checkbox (which deletes the current list contents), you\'92ll change the behavior to either use a transient name attribute (so that refreshes will nil out the names) or a non-transient name attribute (so that refreshes won\'92t nil out the names).\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 The trick? The instance of the model you load from disk can\'92t be edited at\'a0
\i all
\i0 , even before its use in a persistent container. You have to make a copy of it.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs36 \cf4 \cb3 3. In-Memory Stores Can\'92t Be Transferred
\b0\fs30 \cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 My original project used an on-disk persistent data store, but deleted it every time the app started up.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 This time around, instead, I used an in-memory persistent data store, which resets itself on every restart with no muss, no fuss. (This is also very useful for unit tests.)\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Now above, I said that if you toggle the \'93Transient\'94 checkbox, all the current database contents are deleted, right? That\'92s because I have to throw away the current model, and make a new one with the transient attribute handled in a different way.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 If I were using an on-disk persistent store, I could just reload the contents from disk using that new model.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 But since I\'92m using an in-memory persistent store, there\'92s no on-disk backup to turn to.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 And the APIs that Apple provides in 
\f1 NSPersistentStoreCoordinator
\f0 , as far as I can see, do\'a0
\i not
\i0  allow you to detach an existing store from a coordinator and re-attach it to a new coordinator. It\'a0
\i always
\i0  assumes you can reload the store contents from a file on disk, which makes a new store object.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 I\'92ve long believed that, even though Apple tends to say Core Data is an object management framework independent of storage mechanism, that\'92s just hogwash. No company I\'92ve ever worked at uses Core Data for anything serious without backing it with a SQLite database, and all of Core Data\'92s heavy-duty features are geared towards that configuration.\cf4 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Here, as we can see, even their APIs favor one kind of store over another. Which is as it should be! But I wish they\'92d stop pretending.}